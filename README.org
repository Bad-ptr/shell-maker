* shell-maker

=shell-maker= is a convenience wrapper around [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Prompts.html][comint mode]].

Both [[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]] and [[https://github.com/xenodium/chatgpt-shell][dall-e-shell]] are based on =shell-maker=.

A basic shell implementation looks as follows:

#+begin_src emacs-lisp :lexical no
  (require 'map)
  (require 'shell-maker)

  (defvar greeter-shell--config
    (make-shell-maker-config
     :name "Greeter"
     :execute-command
     (lambda (command shell)
       (funcall (map-elt shell :write-output)
                (format "Hello \"%s\"." command))
       (funcall (map-elt shell :finish-output) t))))

  (defun greeter-shell ()
    "Start a Greeter shell."
    (interactive)
    (shell-maker-start greeter-shell--config))
#+end_src

#+HTML: <img src="https://raw.githubusercontent.com/xenodium/shell-maker/main/demos/sofia.gif" width="80%" />

Invoke =shell='s :write-output as many times as needed to stream responses.

#+begin_src emacs-lisp :lexical no
  (require 'map)
  (require 'shell-maker)

  (defvar greeter-shell--config
    (make-shell-maker-config
     :name "Greeter"
     :execute-command
     (lambda (command shell)
       (mapc (lambda (char)
               (sit-for 0.008)
               (funcall (map-elt shell :write-output)
                        (format "%c" char)))
             (format "Hello \"%s\". Nice to see you again!

  It's been %d days since I last saw you."
                     command (random 30)))
       (funcall (map-elt shell :finish-output) t))))

  (defun greeter-shell ()
    "Start a Greeter shell."
    (interactive)
    (shell-maker-start greeter-shell--config))
#+end_src

#+HTML: <img src="https://raw.githubusercontent.com/xenodium/shell-maker/main/demos/sofia-stream.gif" width="80%" />
